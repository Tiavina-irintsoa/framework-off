Sprint10:
    ✔ Creation annotation scope @done(23-06-06 10:52)
    ✔ lors du parcours des classes si la classe a une annotation Scope: ajouter dans HashMap<String,Object> singleton et HashMap <Class, Fields> fields @done(23-06-06 10:52)
    ✔ Ajouter Field[] dans Field @done(23-06-06 10:52)
    ✔ creeer la fonction Util.reset(Object) @done(23-06-09 09:08)
    ✔ Frontservlet.processRequest: si la classe existe dans Hashmap singleton : si Object est null, instancier, sinon reset tous les attributs par les valeurs par defaut, si elle n'existe pas: instancier @done(23-06-09 09:08)
    ☐ modifier tous les reflects pour avoir fields par Fields

Sprint 11:
    ✔ Ajouter sessionName dans web.xml @done(23-06-12 13:49)
    ✔ Ajouter une annotation @auth @done(23-06-12 13:51)
    ✔ frontservlet: if @auth : if isset session(sessionName) => mety if @auth.profile != null: if isset session(profil) == @auth.profile @done(23-06-12 14:06)
    ✔ ajouter un attribut Session dans ModelView @done(23-06-12 14:06)

String 12:
    ☐ Session: HashMap<String,Object> content; HashMap<String,Object> add; HashMap<String,Object> remove; 
    ☐ methode: setSession()=>ajouter dans add et content; get(key)=>return value; removeSession(key)=>add dans remove
    ☐ creer une classe Session_Controller : Session session;
    ☐ FrontServlet: si @session => alimenter session.content;
    ☐ FrontServlet: supprimer dans remove;
    ☐ FrontServlet: setAttribute(dans add)
Sprint 13: 
    ☐ Ajouter un attribut boolean isJSON dans ModelView
    ☐ processRequest: si true: json encode l'attribut data de modelview (utlisation de la librairie gson ) et l'afficher
    ☐ modifier le content type du response en json 

Sprint 14 :
    ☐ creer une annotation json
    ☐ controller: type de retour: tsy modelview 
    ☐ json le type de retour de la fonction 
    ☐ out.print
